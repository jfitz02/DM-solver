from tkinter import *               #tkinter is used for GUI
from TSP import TSP                 #Personally made class used to solve the Travelling Salesman Problem
from graph import Window            #Personnaly made Parent Class to the graph related GUI's
import question_string as qs

class TSP_window(Window):       #TSP solver window

    def __init__(self, master, user, solverid):
        Window.__init__(self, master, user, solverid)
        self.master.title("Travelling Salesman Problem Solver")
          

    def make_inputs(self):      #makes the inputs for the solver
        Window.make_inputs(self)
        self.poss_nodes = [chr(i+65) for i in range(self.nodes.get())]
        self.selected = StringVar()
        self.selected.set("A")
        OptionMenu(self.master, self.selected, *self.poss_nodes).grid(row=1, column=2, columnspan=self.master.grid_size()[0]-3)
                                                                                    #extra option to select starting node

        self.solve_label2 = Label(self.master, text="Lower Bound: ")
        size = self.master.grid_size()
        self.solve_label = Label(self.master, text="Upper Bound: ")     #labels to show result
        self.solve_label.grid(row=size[1]+1, column=0, columnspan=size[0])
        self.solve_label2.grid(row=size[1], column=0, columnspan=size[0])
        

    def solve_problem(self, output, answer = False):        #solves the problem
        network = TSP(output)
        if network.matrix != False:
            self.answer_lb = network.lower_bound(self.selected.get())   #gets lower bound
            self.answer_ub = network.upper_bound(self.selected.get())   #gets upper bound
            data = [self.selected.get()]
            for row in output:
                for val in row:
                    data.append(val)
            database_string = qs.generate_string("TSP", data)
            if answer == False:
                self.input_to_database(database_string)     #if the question is being solved not answered by the user input question to database
        else:
            messagebox.showinfo("Tk", "Inadequate graph for problem\nEnsure there is no empty nodes")

        size = self.master.grid_size()
        try:
            self.solve_label.configure(text="Upper Bound: {}".format(self.answer_ub))
            self.solve_label2.configure(text="Lower Bound: {}".format(self.answer_lb))
        except:
            pass

class TSP_answer(TSP_window):       #window for users to attempt to answer a problem
    def __init__(self, master, user, solverid):
        TSP_window.__init__(self, master, user, solverid)
        self.master.title("Travelling Salesman Problem: Test Your Answers")

    def make_inputs(self):          #additional inputs for users to enter their answers for the problems
        TSP_window.make_inputs(self)
        self.solve_label.destroy()
        self.solve_label2.destroy()
        self.solve_button.destroy()
        self.answer_ub_string = StringVar()
        self.answer_lb_string = StringVar()
        size = self.master.grid_size()
        Entry(self.master, textvariable = self.answer_ub_string).grid(row=size[1]+1, column=0, columnspan=size[0])
        Entry(self.master, textvariable = self.answer_lb_string).grid(row=size[1]+3, column=0, columnspan=size[1])
        
        Label(self.master, text="Upper Bound: ").grid(row=size[1], column=0, columnspan=size[0])
        Label(self.master, text="Lower Bound: ").grid(row=size[1]+2, column=0, columnspan=size[0])
        Button(self.master, text="Answer", command=self.test_answer).grid(row=size[1]+4, column=0, columnspan=size[0])  #button to submit answer

    def test_answer(self):      #tests the users answer against the answer generated by the program
        self.get_inputs(answer = True)

        data = [self.selected.get()]
        for row in self.matrix:
            for val in row:
                data.append(val.get())
        
        if str(self.answer_ub) == str(self.answer_ub_string.get()) and str(self.answer_lb) == str(self.answer_lb_string.get()):
            self.process_correct("TSP", data)
        else:
            self.change_success_rate(False)
            messagebox.showinfo("Tk", "Incorrect")

class Tsp_algorithm:        #displays the TSP algorithm to the user
    def __init__(self, master):
        self.master = master
        self.master.title("Travelling Salesman Problem Algorithm")
        self.img = PhotoImage(file="TSP.PNG")
        canvas = Canvas(self.master, width=self.img.width(), height=self.img.height())
        canvas.create_image(0,0, anchor = NW, image=self.img)
        canvas.pack()

def create_window(master, user, solverid, solver = True): #####CREATE NEW FRAME FOR NEW WINDOW#####
    new_window = Toplevel(master)
    if solver:
        tsp_window = TSP_window(new_window, user, solverid)
    else:
        tsp_window = TSP_answer(new_window, user, solverid)
    new_window.mainloop()

def show_algorithm(master):
    new_window = Toplevel(master)
    tsp_window = Tsp_algorithm(new_window)
    new_window.mainloop()

